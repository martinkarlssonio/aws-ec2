AWSTemplateFormatVersion: '2010-09-09'
Description: WordPress install using CloudFormation
Parameters:
  DBName: 
    NoEcho: true
    Description: The database name
    Type: String
    MinLength: 1
    MaxLength: 20
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBUser: 
    NoEcho: true
    Description: The database admin account username
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  DBPassword: 
    NoEcho: true
    Description: The database admin account password
    Type: String
    MinLength: 1
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9]*$
  LatestAmazonLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: WordPress-Stack
## Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: WordPress-Stack
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

## Subnet
  SubnetPublic:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1a
      CidrBlock: 10.0.0.0/20
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress-Stack
  SubnetPrivate:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: eu-west-1b
      CidrBlock: 10.0.16.0/20
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress-Stack
  DBSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupDescription: "Subnet Group"
        SubnetIds:
          - !Ref SubnetPublic
          - !Ref SubnetPrivate

## Route Table
  RouteTablePublic:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress-Stack
        - Key: Network
          Value: Public
  
  RouteTableAssociationPublic:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      RouteTableId: !Ref RouteTablePublic

  RouteTablePublicInternetRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

## ACL
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: WordPress-Stack

  SubnetNetworkAclAssociationPublic:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref SubnetPublic
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

## Security Group
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security Group created for WordPress Install'
      GroupName: WordPress-sg
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: WordPress-Stack
      VpcId: !Ref VPC

### EFS
  WordPressEFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      ThroughputMode: bursting
  EFSMountTargetPublic:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId:
        Ref: WordPressEFSFileSystem
      SubnetId:
        Ref: SubnetPublic
      SecurityGroups:
        - Ref: InstanceSecurityGroup

  EFSMountTargetPrivate:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId:
        Ref: WordPressEFSFileSystem
      SubnetId:
        Ref: SubnetPrivate
      SecurityGroups:
        - Ref: InstanceSecurityGroup

### EC2
  LinuxEc2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref LatestAmazonLinuxAmiId
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          GroupSet:
            - Ref: 'InstanceSecurityGroup'
          SubnetId:
            Ref: 'SubnetPublic'
      UserData:
        !Base64 |
          #!/bin/bash
          sudo yum update -y
          sudo amazon-linux-extras install -y php7.4 
          sudo yum install -y httpd
          sudo yum install -y amazon-efs-utils

          sudo systemctl start httpd
          sudo systemctl enable httpd
          sudo systemctl is-enabled httpd

          sudo usermod -a -G apache ec2-user
          groups ec2-user

          sudo chown -R ec2-user:apache /var/www
          sudo chmod 2775 /var/www && find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;

          EFS_FILE_SYSTEM_ID=$(aws efs describe-file-systems --query "FileSystems[?Name=='WordPressEFSFileSystem'].FileSystemId" --output text)
          mount -t efs $EFS_FILE_SYSTEM_ID:/ /var/www/html
          echo "$EFS_FILE_SYSTEM_ID:/ /var/www/html efs defaults,_netdev 0 0" >> /etc/fstab

          sudo chown -R apache:apache /var/www/html
          cd /var/www/html/
          wget https://wordpress.org/latest.tar.gz
          tar -xzf latest.tar.gz
          mv  -v wordpress/* /var/www/html/
          sudo chown -R apache:apache /var/www/html
          fi
      Tags:
        - Key: Name
          Value: WordPress-EC2

## Security Group
  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open database for access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: WordPress-DB
      VpcId: !Ref VPC

## RDS
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      DBInstanceClass: db.t2.micro
      BackupRetentionPeriod: 0
      AllocatedStorage: 20
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: 
        - !GetAtt "DBEC2SecurityGroup.GroupId"

Outputs:
  DBHost:
    Description: DB Instance Host Address
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: WordpressDBHost
  PublicURL:
    Description: Public URL of the EC2 Instance
    Value: !GetAtt LinuxEc2Instance.PublicDnsName
    Export:
      Name: WordpressBasePublicUrl